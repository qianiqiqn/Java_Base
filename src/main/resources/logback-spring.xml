<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--application.yml 传递参数，不能使用logback自带的<property> -->
	<springProperty scope="context" name="appname"
					source="spring.application.name" />
	<springProperty scope="context" name="logdir"
					source="logging.file.path" />
	<contextName>${appname}</contextName>
	<!-- 把日志pattern里的%tid占位符解析为链路ID -->
	<!--	<conversionRule conversionWord="tid"-->
	<!--		converterClass="org.apache.skywalking.apm.toolkit.log.logback.v1.x.LogbackPatternConverter" />-->

	<!--输出到控制台 ConsoleAppender -->
	<appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>[%date] ${LOG_LEVEL_PATTERN:-%5p} [%thread] %logger{60} [%file:%line] %msg%n
			</pattern>
		</layout>
	</appender>
	<appender name="fileLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志名称，如果没有Fi1e 属性，那么只会使用Fi1eNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<Fi1e>，明天会自动把今天
			的日志改名为今天的日期。即，<File〉的日志都是当天的。 -->
		<file>${logdir}/${appname}.log</file>
		<!-- 滚动策略，按照时间滚动TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 文件路径,定义了日志的切分方式—把每一天的日志归档到一个文件中以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logdir}/${appname}-%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!-- 单个日志文件最大，超过后将进行切割 -->
			<maxFileSize>500MB</maxFileSize>
			<!-- 文件日志总大小，超过后将删除旧日志数据 -->
			<totalSizeCap>5GB</totalSizeCap>
			<cleanHistoryOnStart>true</cleanHistoryOnStart>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%date] ${LOG_LEVEL_PATTERN:-%5p} [%thread] %logger{60} [%file:%line] %msg%n
			</pattern>
		</encoder>
	</appender>

	<!--druid慢查询日志输出 -->
	<appender name="duridLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${logdir}/log_druid.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<FileNamePattern>${logdir}/log-druid-%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!-- 只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!-- 单个日志文件最大，超过后將进行切割 -->
			<maxFileSize>2MB</maxFileSize>
			<!--文件日志总大小，超过后将删除旧日志数据 -->
			<totalSizeCap>500MB</totalSizeCap>
			<!--应用启动删除历史数据 -->
			<cleanHistoryOnStart>true</cleanHistoryOnStart>
		</rollingPolicy>
		<!--追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder
				class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger Line:%-3L - %msg%n
			</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--过滤日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
		</filter>
	</appender>
	<!--druid相关logger, additivity="false" 设置打印信息行为不向上级传递 -->
	<logger name="com.alibaba.druid.filter.stat.StatFilter"
			level="ERROR" additivity="false">
		<appender-ref ref="consoleLog" />
		<appender-ref ref="duridLog" />
	</logger>

	<!-- mybatisplus配置 -->
	<logger name="com.baomidou.mybatisplus.core.toolkit.Wrappers" level="DEBUG"/>
	<logger name="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor" level="DEBUG"/>
	<logger name="com.baomidou.mybatisplus.core.parser" level="DEBUG"/>


	<!-- 1oger配置,范围有重叠的话，范围小的，有效。 -->
	<!-- 测试环境+开发环境．多个使用逗号隔开. -->
	<springProfile name="dev,sit,uat,ver">
		<logger name="com.sutpc" level="DEBUG">
		</logger>
	</springProfile>
	<!--生产环境 -->
	<springProfile name="pro">
		<logger name="com.sutpc" level="INFO">
		</logger>
	</springProfile>
	<!--针对DAO的包进行全环境DEBUG日志设置输出SQL -->
	<logger name="com.sutpc.dao" level="DEBUG" />

	<root level="INFO">
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileLog" />
	</root>

</configuration>